# Project Clearwater - IMS in the Cloud
# Copyright (C) 2015  Metaswitch Networks Ltd
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation, either version 3 of the License, or (at your
# option) any later version, along with the "Special Exception" for use of
# the program along with SSL, set forth below. This program is distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;
# without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details. You should have received a copy of the GNU General Public
# License along with this program.  If not, see
# <http://www.gnu.org/licenses/>.
#
# The author can be reached by email at clearwater@metaswitch.com or by
# post at Metaswitch Networks Ltd, 100 Church St, Enfield EN2 6BQ, UK
#
# Special Exception
# Metaswitch Networks Ltd  grants you permission to copy, modify,
# propagate, and distribute a work formed by combining OpenSSL with The
# Software, or a work derivative of such a combination, even if such
# copying, modification, propagation, or distribution would otherwise
# violate the terms of the GPL. You must comply with the GPL in all
# respects for all of the code used other than OpenSSL.
# "OpenSSL" means OpenSSL toolkit software distributed by the OpenSSL
# Project and licensed under the OpenSSL Licenses, or a work based on such
# software and licensed under the OpenSSL Licenses.
# "OpenSSL Licenses" means the OpenSSL License and Original SSLeay License
# under which the OpenSSL Project distributes the OpenSSL toolkit software,
# as those licenses appear in the file LICENSE-OPENSSL.

heat_template_version: 2013-05-23

description: >
  Clearwater deployment

parameters:
  public_mgmt_net_id:
    type: string
    description: ID of public management network
    constraints:
      - custom_constraint: neutron.network
        description: Must be a valid network ID
  private_mgmt_net_cidr:
    type: string
    description: Private management network address (CIDR notation)
    default: 10.11.12.0/24
  private_mgmt_net_gateway:
    type: string
    description: Private management network gateway address
    default: 10.11.12.1
  private_mgmt_net_pool_start:
    type: string
    description: Start of private management network IP address pool
    default: 10.11.12.20
  private_mgmt_net_pool_end:
    type: string
    description: End of private management network IP address pool
    default: 10.11.12.253
  external_mgmt_dns_ip:
    type: string
    description: IP address of external DNS server on management network
    default: 8.8.8.8
  public_sig_net_id:
    type: string
    description: ID of public signaling network
    constraints:
      - custom_constraint: neutron.network
        description: Must be a valid network ID
  private_sig_net_ip_version:
    type: string
    description: IP version (4 or 6) on the private signaling network
    constraints:
      - allowed_values:
        - "4"
        - "6"
        description: Must be 4 (IPv4) or 6 (IPv6)
    default: "4"
  private_sig_net_cidr:
    type: string
    description: Private signaling network address (CIDR notation)
    default: 192.166.1.0/24
  private_sig_net_gateway:
    type: string
    description: Private signaling network gateway address
    default: 192.166.1.1
  private_sig_net_pool_start:
    type: string
    description: Start of private signaling network IP address pool
    default: 192.166.1.10
  private_sig_net_pool_end:
    type: string
    description: End of private signaling network IP address pool
    default: 192.166.1.253
  external_sig_dns_ip:
    type: string
    description: IP address of external DNS server on signaling network
    default: 8.8.8.8
  flavor:
    type: string
    description: Flavor to use
    constraints:
      - custom_constraint: nova.flavor
        description: Must be a valid flavor name
  image:
    type: string
    description: Name of image to use
    constraints:
      - custom_constraint: glance.image
        description: Must be a valid image name
  key_name:
    type: string
    description: Name of keypair to assign
    constraints:
      - custom_constraint: nova.keypair
        description: Must be a valid keypair name
  repo_url:
    type: string
    description: URL for Clearwater repository
    default: http://repo.cw-ngv.com/stable
  zone:
    type: string
    description: DNS zone
    default: jaafarbendriss.com
  dn_range_start:
    type: string
    description: First directory number in pool
    default: "6505550000"
    constraints:
      - allowed_pattern: "[0-9]+"
        description: Must be numeric
  dn_range_length:
    type: string
    description: Number of directory numbers to add to pool
    default: "1000"
    constraints:
      - allowed_pattern: "[0-9]+"
        description: Must be numeric
  dnssec_key:
    type: string
    description: DNSSEC private key (Base64-encoded)
    constraints:
      - allowed_pattern: "[0-9A-Za-z+/=]+"
        description: Must be Base64-encoded
  bono_cluster_size:
    type: number
    description: Number of Bono nodes in Bono cluster
    default: 1
  sprout_cluster_size:
    type: number
    description: Number of Sprout nodes in Sprout cluster
    default: 1
  homer_cluster_size:
    type: number
    description: Number of Homer nodes in Homer cluster
    default: 1
  homestead_cluster_size:
    type: number
    description: Number of Homestead nodes in Homestead cluster
    default: 1
  ralf_cluster_size:
    type: number
    description: Number of Ralf nodes in Ralf cluster
    default: 1

resources:
  mgmt_network:
    type: https://github.com/heekof/SDN-NFV-Testbed/blob/master/clearwater.yaml
    properties:
      public_net_id: { get_param: public_mgmt_net_id }
      private_net_name: { str_replace: { params: { __stack__: { get_param: "OS::stack_name" } }, template: __stack__-private-management } }
      private_net_cidr: { get_param: private_mgmt_net_cidr }
      private_net_gateway: { get_param: private_mgmt_net_gateway }
      private_net_pool_start: { get_param: private_mgmt_net_pool_start }
      private_net_pool_end: { get_param: private_mgmt_net_pool_end }
      dns_ip: { get_param: external_mgmt_dns_ip }

  sig_network:
    type: https://github.com/heekof/SDN-NFV-Testbed/blob/master/clearwater.yaml
    properties:
      public_net_id: { get_param: public_sig_net_id }
      private_net_name: { str_replace: { params: { __stack__: { get_param: "OS::stack_name" } }, template: __stack__-private-signaling } }
      private_net_ip_version: { get_param: private_sig_net_ip_version }
      private_net_cidr: { get_param: private_sig_net_cidr }
      private_net_gateway: { get_param: private_sig_net_gateway }
      private_net_pool_start: { get_param: private_sig_net_pool_start }
      private_net_pool_end: { get_param: private_sig_net_pool_end }
      dns_ip: { get_param: external_sig_dns_ip }

  security_groups:
    type: https://github.com/heekof/SDN-NFV-Testbed/blob/master/security-groups.yaml
    properties:
      name_prefix: { get_param: "OS::stack_name" }

  dns:
    type: https://github.com/heekof/SDN-NFV-Testbed/blob/master/dns.yaml
    properties:
      public_mgmt_net_id: { get_param: public_mgmt_net_id }
      private_mgmt_net_id: { get_attr: [ mgmt_network, private_net ] }
      public_sig_net_id: { get_param: public_sig_net_id }
      private_sig_net_id: { get_attr: [ sig_network, private_net ] }
      private_sig_net_cidr: { get_attr: [ sig_network, private_net_cidr ] }
      flavor: { get_param: flavor }
      image: { get_param: image }
      key_name: { get_param: key_name }
      dns_security_group: { get_attr: [ security_groups, dns ] }
      zone: { get_param: zone }
      dnssec_key: { get_param: dnssec_key }

  ellis:
    type: https://github.com/heekof/SDN-NFV-Testbed/blob/master/ellis.yaml
    properties:
      public_mgmt_net_id: { get_param: public_mgmt_net_id }
      private_mgmt_net_id: { get_attr: [ mgmt_network, private_net ] }
      flavor: { get_param: flavor }
      image: { get_param: image }
      key_name: { get_param: key_name }
      base_mgmt_security_group: { get_attr: [ security_groups, base_mgmt ] }
      ellis_mgmt_security_group: { get_attr: [ security_groups, ellis_mgmt ] }
      repo_url: { get_param: repo_url }
      zone: { get_param: zone }
      dn_range_start: { get_param: dn_range_start }
      dn_range_length: { get_param: dn_range_length }
      dns_mgmt_ip: { get_attr: [ dns, private_mgmt_ip ] }
      dnssec_key: { get_param: dnssec_key }

  bono:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: bono_cluster_size }
      index_var: "__index__"
      resource_def:
        type: ./bono.yaml
        properties:
          public_mgmt_net_id: { get_param: public_mgmt_net_id }
          private_mgmt_net_id: { get_attr: [ mgmt_network, private_net ] }
          public_sig_net_id: { get_param: public_sig_net_id }
          private_sig_net_id: { get_attr: [ sig_network, private_net ] }
          private_sig_net_cidr: { get_attr: [ sig_network, private_net_cidr ] }
          private_sig_net_gateway: { get_attr: [ sig_network, private_net_gateway ] }
          flavor: { get_param: flavor }
          image: { get_param: image }
          key_name: { get_param: key_name }
          base_mgmt_security_group: { get_attr: [ security_groups, base_mgmt ] }
          bono_sig_security_group: { get_attr: [ security_groups, bono_sig ] }
          repo_url: { get_param: repo_url }
          zone: { get_param: zone }
          dns_mgmt_ip: { get_attr: [ dns, private_mgmt_ip ] }
          dns_sig_ip: { get_attr: [ dns, private_sig_ip ] }
          dnssec_key: { get_param: dnssec_key }
          etcd_ip: { get_attr: [ ellis, private_mgmt_ip ] }
          index: __index__

  sprout:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: sprout_cluster_size }
      index_var: __index__
      resource_def:
        type: ./sprout.yaml
        properties:
          public_mgmt_net_id: { get_param: public_mgmt_net_id }
          private_mgmt_net_id: { get_attr: [ mgmt_network, private_net ] }
          public_sig_net_id: { get_param: public_sig_net_id }
          private_sig_net_id: { get_attr: [ sig_network, private_net ] }
          private_sig_net_cidr: { get_attr: [ sig_network, private_net_cidr ] }
          private_sig_net_gateway: { get_attr: [ sig_network, private_net_gateway ] }
          flavor: { get_param: flavor }
          image: { get_param: image }
          key_name: { get_param: key_name }
          base_mgmt_security_group: { get_attr: [ security_groups, base_mgmt ] }
          sprout_sig_security_group: { get_attr: [ security_groups, sprout_sig ] }
          sprout_sig2_security_group: { get_attr: [ security_groups, sprout_sig2 ] }
          repo_url: { get_param: repo_url }
          zone: { get_param: zone }
          dns_mgmt_ip: { get_attr: [ dns, private_mgmt_ip ] }
          dns_sig_ip: { get_attr: [ dns, private_sig_ip ] }
          dnssec_key: { get_param: dnssec_key }
          etcd_ip: { get_attr: [ ellis, private_mgmt_ip ] }
          index: __index__

  homer:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: homer_cluster_size }
      index_var: __index__
      resource_def:
        type: ./homer.yaml
        properties:
          public_mgmt_net_id: { get_param: public_mgmt_net_id }
          private_mgmt_net_id: { get_attr: [ mgmt_network, private_net ] }
          public_sig_net_id: { get_param: public_sig_net_id }
          private_sig_net_id: { get_attr: [ sig_network, private_net ] }
          private_sig_net_cidr: { get_attr: [ sig_network, private_net_cidr ] }
          private_sig_net_gateway: { get_attr: [ sig_network, private_net_gateway ] }
          flavor: { get_param: flavor }
          image: { get_param: image }
          key_name: { get_param: key_name }
          base_mgmt_security_group: { get_attr: [ security_groups, base_mgmt ] }
          homer_mgmt_security_group: { get_attr: [ security_groups, homer_mgmt ] }
          homer_sig_security_group: { get_attr: [ security_groups, homer_sig ] }
          repo_url: { get_param: repo_url }
          zone: { get_param: zone }
          dns_mgmt_ip: { get_attr: [ dns, private_mgmt_ip ] }
          dns_sig_ip: { get_attr: [ dns, private_sig_ip ] }
          dnssec_key: { get_param: dnssec_key }
          etcd_ip: { get_attr: [ ellis, private_mgmt_ip ] }
          index: __index__

  homestead:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: homestead_cluster_size }
      index_var: __index__
      resource_def:
        type: ./homestead.yaml
        properties:
          public_mgmt_net_id: { get_param: public_mgmt_net_id }
          private_mgmt_net_id: { get_attr: [ mgmt_network, private_net ] }
          public_sig_net_id: { get_param: public_sig_net_id }
          private_sig_net_id: { get_attr: [ sig_network, private_net ] }
          private_sig_net_cidr: { get_attr: [ sig_network, private_net_cidr ] }
          private_sig_net_gateway: { get_attr: [ sig_network, private_net_gateway ] }
          flavor: { get_param: flavor }
          image: { get_param: image }
          key_name: { get_param: key_name }
          base_mgmt_security_group: { get_attr: [ security_groups, base_mgmt ] }
          homestead_mgmt_security_group: { get_attr: [ security_groups, homestead_mgmt ] }
          homestead_sig_security_group: { get_attr: [ security_groups, homestead_sig ] }
          repo_url: { get_param: repo_url }
          zone: { get_param: zone }
          dns_mgmt_ip: { get_attr: [ dns, private_mgmt_ip ] }
          dns_sig_ip: { get_attr: [ dns, private_sig_ip ] }
          dnssec_key: { get_param: dnssec_key }
          etcd_ip: { get_attr: [ ellis, private_mgmt_ip ] }
          index: __index__

  ralf:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: ralf_cluster_size }
      index_var: __index__
      resource_def:
        type: ./ralf.yaml
        properties:
          public_mgmt_net_id: { get_param: public_mgmt_net_id }
          private_mgmt_net_id: { get_attr: [ mgmt_network, private_net ] }
          public_sig_net_id: { get_param: public_sig_net_id }
          private_sig_net_id: { get_attr: [ sig_network, private_net ] }
          private_sig_net_cidr: { get_attr: [ sig_network, private_net_cidr ] }
          private_sig_net_gateway: { get_attr: [ sig_network, private_net_gateway ] }
          flavor: { get_param: flavor }
          image: { get_param: image }
          key_name: { get_param: key_name }
          base_mgmt_security_group: { get_attr: [ security_groups, base_mgmt ] }
          ralf_sig_security_group: { get_attr: [ security_groups, ralf_sig ] }
          repo_url: { get_param: repo_url }
          zone: { get_param: zone }
          dns_mgmt_ip: { get_attr: [ dns, private_mgmt_ip ] }
          dns_sig_ip: { get_attr: [ dns, private_sig_ip ] }
          dnssec_key: { get_param: dnssec_key }
          etcd_ip: { get_attr: [ ellis, private_mgmt_ip ] }
          index: __index__

outputs:
  zone:
    description: DNS zone
    value: { get_param: zone }
  dns_ip:
    description: IP address of DNS
    value: { get_attr: [ dns, public_mgmt_ip ] }
